#!/bin/bash

# Exit cleanly on Ctrl-C
trap 'exit 1' INT

PODIRECTORY='/var/www/sites/pootle/translations/'
PODIRECTORY_MOZ='/var/www/sites/mozilla/translations/'

REMOTE_PODIRECTORY='/var/www/sites/pootle-staging/translations/'

SRC_DIR='/var/www/sites/pootle-staging/src'

eval export HOME=~$(id -un)
REMOTE=admin@staging2.locamotion.org

function log() {
	echo -n "LOG:"
	echo $*
}

# Update local Git repository and re-exec this script if updated
SUM=$(md5sum $0)
if (cd $HOME/pootle && git pull); then
    if [ "$SUM" != "$(md5sum $0)" ]; then
	echo "Re-exec'ing updated $0 script"
	exec $0 "$@"
    fi
fi

cd $HOME/pootle

# Activate virtualenv to get Fabric module
source $HOME/env/bin/activate

# Set up PYTHONPATH for fabfile.py, deploy/staging
export PYTHONPATH=$HOME/pootle:$PYTHONPATH

log "Disabling site temporarily"
fab staging disable_site

log "Pulling from pootle git & Installing dependencies"
fab staging update_code:HEAD

# R=$(git log --pretty=oneline --abbrev-commit -1 |cut -d" " -f 1)
# R=$(git describe --tags)
# R=$(ssh $REMOTE "cd $SRC_DIR && git describe --tags")

log "Restoring the database from the production pootle server"
# We need to DROP and CREATE DATABASE as the backup doesn't contain a DROP
# DATABASE.  Any previous migrations will have moved TABLES. Subsequent updates
# will fail as the destination table will already exist.
(echo y; echo y) | fab staging drop_db
fab staging create_db

bzcat /var/backups/pootle_`date +%A`.sql.bz2 |
 grep -v '^INSERT INTO `django_session`' > production.sql
(echo y; echo y) | fab staging load_db:production.sql
rm -f production.sql

# Copy translation files
ssh $REMOTE "rm -rf $REMOTE_PODIRECTORY/*"
log "Copying Pootle translation files"
scp -qpr $PODIRECTORY/* $REMOTE:$REMOTE_PODIRECTORY

# Copy Firefox project from moz_pootle
log "Copying Firefox translation files"
scp -qpr $PODIRECTORY_MOZ/firefox/ $REMOTE:$REMOTE_PODIRECTORY

# Update the database to the latest (even though updatedb is no longer needed,
# and after production moves to 2.5.1, syncdb and migrate --fake aren't either)
log "Running database update (updatedb + syncdb + migrate --fake + migrate)"
fab staging update_db
log "Running upgrade hook"
fab staging upgrade

# TODO: this wasn't working before staging moved to linode2, ought to be fixed
# (might be related to the following message: DeprecationWarning: Translations
# in the project directory aren't supported anymore. Use the LOCALE_PATHS
# setting instead.)
#
#log "Updating server title and description"
#DESC="<ul>
#<li>This server is for <strong>testing purposes only</strong>.</li>
#<li>You can use your username and password from the <a href='http://pootle.locamotion.org'>official Pootle server</a> to log in.</li>
#<li>The server is updated daily and any data entered will be lost.</li>
#<li>Running source code from <a href='https://github.com/translate/pootle/commit/$R'>commit $R</a>.</li>
#</ul>"
#
#$PYTHON - <<CONTENT
#import os
#os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'
#
#from pootle import syspath_override
#from pootle_misc import siteconfig
#
#c = siteconfig.load_site_config()
#c.set("TITLE", u"Staging Pootle server ($R)")
#c.set("DESCRIPTION", u"""$DESC""")
#c.save()
#CONTENT

# Create Firefox project *after* migrating the DB
log "Creating Firefox project "
ssh $REMOTE "cd $SRC_DIR && source ../env/bin/activate python -" <<CONTENT
import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'pootle.settings'

from pootle import syspath_override
from pootle_app.management import require_english
from pootle_project.models import Project

en = require_english()

fx = Project(code=u"firefox", source_language=en)
fx.fullname = u"Mozilla Firefox"
fx.description = "Mozilla Firefox (Aurora)"
fx.checkstyle = "mozilla"
fx.localfiletype = "po"
fx.treestyle = "auto"
fx.save()
CONTENT

log "Collecting static files"
fab staging deploy_static

log "Creating debug UI languages"
ssh $REMOTE "cd $SRC_DIR/.. && source env/bin/activate && (
 cd $SRC_DIR/pootle
 podebug --errorlevel=traceback --rewrite=xxx locale/templates/ po/xxx
 podebug --errorlevel=traceback --rewrite=unicode locale/templates/ po/uni
) && (
 cd $REMOTE_PODIRECTORY/pootle
 podebug --errorlevel=traceback --rewrite=xxx templates/ xxx
 podebug --errorlevel=traceback --rewrite=unicode templates/ uni
); sleep 10"

log "Building UI languages"
fab staging compile_translations

sleep 10
log "Enabling site again"
fab staging enable_site

# The sleep here and above are work arounds for sshd rate limiting (or
# something like that) causing Connection Refused exceptions on fab commands.
sleep 30
log "Enabling site again (double-check)"
fab staging enable_site
