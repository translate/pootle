# -*- coding: utf-8 -*-
# Generated by Django 1.9.10 on 2016-10-06 13:51
from __future__ import unicode_literals

from django.contrib.contenttypes.management import update_contenttypes
from django.db import migrations

def create_permission_add_project(apps, schema_editor):
    update_contenttypes(apps.app_configs['pootle_project']) 
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    try:
        pootle_project_model = ContentType.objects.get(
            app_label="pootle_app", 
            model="directory"
        )
        try:
            add_project_permission = Permission.objects.get(
                codename="create_project",
                content_type=pootle_project_model
            )
        except Permission.DoesNotExist:
            pootle_project_model = ContentType.objects.get(
                app_label="pootle_app", 
                model="directory"
            )
            add_project_permission = Permission(
                content_type=pootle_project_model,
                name="Can create a project",
                codename="create_project"
            )
            add_project_permission.save()
    except ContentType.DoesNotExist:
        #Â this means the content types has not been 
        # created yet by the migration tool, thus the migration
        # is starting from beginning (?). That's why, this migration
        # is not required and the permission will be created when
        # populating the database with initdb script.
        pass
    
        


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0001_initial'),
        ('auth', '0001_initial'),
        ('pootle_project', '0016_change_treestyle_choices_label'),
    ]

    operations = [
        migrations.RunPython(create_permission_add_project),
    ]
