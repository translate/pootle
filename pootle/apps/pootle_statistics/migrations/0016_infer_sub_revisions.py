# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-26 13:09
from __future__ import unicode_literals

import logging
import time

from django.db import migrations
from django.db.models import Count, F, Max


logger = logging.getLogger(__name__)


def _find_wrong_revisions(apps):
    start = time.time()
    subs = apps.get_model("pootle_statistics.Submission").objects.all()
    wrong_revisions = (
        subs.order_by("unit_id")
            .values_list("unit_id", "unit__revision")
            .annotate(unit_rev=Max("revision"))
            .exclude(unit_rev=F('unit__revision')))


def _find_dupes(apps):
    # remove dupes
    start = time.time()
    subs = apps.get_model("pootle_statistics.Submission").objects.all()
    dupes = (
        subs.order_by("creation_time", "type", "field", "unit_id", "suggestion_id")
            .values("creation_time", "type", "field", "unit_id", "suggestion_id")
            .distinct()
            .annotate(Count("id"))
            .filter(id__count__gt=1))
    total = dupes.count()
    to_remove = set()
    for dupe in dupes.iterator():
        to_remove |= set(
            list(
                subs.filter(creation_time=dupe["creation_time"])
                    .filter(unit_id=dupe["unit_id"])
                    .filter(type=dupe["type"])
                    .filter(suggestion_id=dupe["suggestion_id"])
                    .filter(field=dupe["field"])
                    .values_list("id", flat=True))[:-1])
    logger.debug(
        "calculated %s dupes from %s subs in %s seconds"
        % (len(to_remove), total, (time.time() - start)))
    return to_remove


def _infer_revisions(apps):
    # infer revisions
    start = time.time()
    subs = apps.get_model("pootle_statistics.Submission").objects.all()
    revisions = subs.filter(revision__gt=0).values_list(
        "creation_time", "id", "unit_id", "revision").order_by("creation_time", "id", "unit_id")
    updated = 0
    count = 0
    total = revisions.count()
    to_update = {}
    for creation_time, pk, unit_id, revision in revisions.iterator():
        count += 1
        uids = range(pk - 4, pk)
        # find any unit with no revision where either same creation_time or same unit_id and pk in the last 4
        rel_subs = subs.filter(revision__isnull=True).filter(unit_id=unit_id)
        rel_subs = set(
            (rel_subs.filter(creation_time=creation_time)
             | rel_subs.filter(id__in=uids)).values_list("id", flat=True))
        if rel_subs:
            to_update[revision] = to_update.get(revision, set()) | rel_subs
        if not (count % 1000):
            logger.debug(
                "calculated %s updates from %s/%s subs in %s seconds"
                % (len(to_update), count, total, (time.time() - start)))
    logger.debug(
        "calculated %s updates from %s subs in %s seconds"
        % (len(to_update), total, (time.time() - start)))
    return to_update


def infer_submission_revisions(apps, schema_editor):
    subs = apps.get_model("pootle_statistics.Submission").objects.all()
    wrong_revisions = _find_wrong_revisions(apps)
    to_remove = _find_dupes(apps)
    subs.filter(id__in=to_remove).delete()
    del to_remove
    to_update = _infer_revisions(apps)
    for revision, pks in to_update.items():
        subs.filter(id__in=pks).update(revision=revision)



class Migration(migrations.Migration):

    dependencies = [
        ('pootle_statistics', '0015_remove_system_scorelogs'),
    ]

    operations = [
        migrations.RunPython(infer_submission_revisions),
    ]
